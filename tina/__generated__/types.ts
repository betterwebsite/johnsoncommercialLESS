//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  listings: Listings;
  listingsConnection: ListingsConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryListingsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryListingsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ListingsFilter>;
};

export type DocumentFilter = {
  listings?: InputMaybe<ListingsFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Listings | Folder;

export type ListingsListingsAdditional_Images = {
  __typename?: 'ListingsListingsAdditional_images';
  url?: Maybe<Scalars['String']['output']>;
};

export type ListingsListingsPrice = {
  __typename?: 'ListingsListingsPrice';
  sale_price?: Maybe<Scalars['Float']['output']>;
  lease_rate?: Maybe<Scalars['String']['output']>;
  price_per?: Maybe<Scalars['Float']['output']>;
};

export type ListingsListingsMisc = {
  __typename?: 'ListingsListingsMisc';
  traffic?: Maybe<Scalars['Float']['output']>;
  caprate?: Maybe<Scalars['Float']['output']>;
  zoning?: Maybe<Scalars['String']['output']>;
  parcelid?: Maybe<Scalars['String']['output']>;
};

export type ListingsListingsLocation = {
  __typename?: 'ListingsListingsLocation';
  city?: Maybe<Scalars['String']['output']>;
  state?: Maybe<Scalars['String']['output']>;
  zipcode?: Maybe<Scalars['String']['output']>;
  lat?: Maybe<Scalars['Float']['output']>;
  lng?: Maybe<Scalars['Float']['output']>;
};

export type ListingsListingsBuildings = {
  __typename?: 'ListingsListingsBuildings';
  square_feet?: Maybe<Scalars['Float']['output']>;
  lot_acres?: Maybe<Scalars['Float']['output']>;
  year_built?: Maybe<Scalars['Float']['output']>;
};

export type ListingsListingsSections = {
  __typename?: 'ListingsListingsSections';
  section_name?: Maybe<Scalars['String']['output']>;
  section_description?: Maybe<Scalars['String']['output']>;
};

export type ListingsListings = {
  __typename?: 'ListingsListings';
  address?: Maybe<Scalars['String']['output']>;
  listing_type?: Maybe<Scalars['String']['output']>;
  property_type?: Maybe<Scalars['String']['output']>;
  pdf_url?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  additional_images?: Maybe<Array<Maybe<ListingsListingsAdditional_Images>>>;
  price?: Maybe<ListingsListingsPrice>;
  misc?: Maybe<ListingsListingsMisc>;
  location?: Maybe<ListingsListingsLocation>;
  buildings?: Maybe<Array<Maybe<ListingsListingsBuildings>>>;
  sections?: Maybe<Array<Maybe<ListingsListingsSections>>>;
  description?: Maybe<Scalars['JSON']['output']>;
  agent_name?: Maybe<Scalars['String']['output']>;
};

export type Listings = Node & Document & {
  __typename?: 'Listings';
  listings?: Maybe<Array<Maybe<ListingsListings>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type ListingsListingsAdditional_ImagesFilter = {
  url?: InputMaybe<ImageFilter>;
};

export type NumberFilter = {
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  eq?: InputMaybe<Scalars['Float']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
};

export type ListingsListingsPriceFilter = {
  sale_price?: InputMaybe<NumberFilter>;
  lease_rate?: InputMaybe<StringFilter>;
  price_per?: InputMaybe<NumberFilter>;
};

export type ListingsListingsMiscFilter = {
  traffic?: InputMaybe<NumberFilter>;
  caprate?: InputMaybe<NumberFilter>;
  zoning?: InputMaybe<StringFilter>;
  parcelid?: InputMaybe<StringFilter>;
};

export type ListingsListingsLocationFilter = {
  city?: InputMaybe<StringFilter>;
  state?: InputMaybe<StringFilter>;
  zipcode?: InputMaybe<StringFilter>;
  lat?: InputMaybe<NumberFilter>;
  lng?: InputMaybe<NumberFilter>;
};

export type ListingsListingsBuildingsFilter = {
  square_feet?: InputMaybe<NumberFilter>;
  lot_acres?: InputMaybe<NumberFilter>;
  year_built?: InputMaybe<NumberFilter>;
};

export type ListingsListingsSectionsFilter = {
  section_name?: InputMaybe<StringFilter>;
  section_description?: InputMaybe<StringFilter>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ListingsListingsFilter = {
  address?: InputMaybe<StringFilter>;
  listing_type?: InputMaybe<StringFilter>;
  property_type?: InputMaybe<StringFilter>;
  pdf_url?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
  additional_images?: InputMaybe<ListingsListingsAdditional_ImagesFilter>;
  price?: InputMaybe<ListingsListingsPriceFilter>;
  misc?: InputMaybe<ListingsListingsMiscFilter>;
  location?: InputMaybe<ListingsListingsLocationFilter>;
  buildings?: InputMaybe<ListingsListingsBuildingsFilter>;
  sections?: InputMaybe<ListingsListingsSectionsFilter>;
  description?: InputMaybe<RichTextFilter>;
  agent_name?: InputMaybe<StringFilter>;
};

export type ListingsFilter = {
  listings?: InputMaybe<ListingsListingsFilter>;
};

export type ListingsConnectionEdges = {
  __typename?: 'ListingsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Listings>;
};

export type ListingsConnection = Connection & {
  __typename?: 'ListingsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ListingsConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateListings: Listings;
  createListings: Listings;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateListingsArgs = {
  relativePath: Scalars['String']['input'];
  params: ListingsMutation;
};


export type MutationCreateListingsArgs = {
  relativePath: Scalars['String']['input'];
  params: ListingsMutation;
};

export type DocumentUpdateMutation = {
  listings?: InputMaybe<ListingsMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  listings?: InputMaybe<ListingsMutation>;
};

export type ListingsListingsAdditional_ImagesMutation = {
  url?: InputMaybe<Scalars['String']['input']>;
};

export type ListingsListingsPriceMutation = {
  sale_price?: InputMaybe<Scalars['Float']['input']>;
  lease_rate?: InputMaybe<Scalars['String']['input']>;
  price_per?: InputMaybe<Scalars['Float']['input']>;
};

export type ListingsListingsMiscMutation = {
  traffic?: InputMaybe<Scalars['Float']['input']>;
  caprate?: InputMaybe<Scalars['Float']['input']>;
  zoning?: InputMaybe<Scalars['String']['input']>;
  parcelid?: InputMaybe<Scalars['String']['input']>;
};

export type ListingsListingsLocationMutation = {
  city?: InputMaybe<Scalars['String']['input']>;
  state?: InputMaybe<Scalars['String']['input']>;
  zipcode?: InputMaybe<Scalars['String']['input']>;
  lat?: InputMaybe<Scalars['Float']['input']>;
  lng?: InputMaybe<Scalars['Float']['input']>;
};

export type ListingsListingsBuildingsMutation = {
  square_feet?: InputMaybe<Scalars['Float']['input']>;
  lot_acres?: InputMaybe<Scalars['Float']['input']>;
  year_built?: InputMaybe<Scalars['Float']['input']>;
};

export type ListingsListingsSectionsMutation = {
  section_name?: InputMaybe<Scalars['String']['input']>;
  section_description?: InputMaybe<Scalars['String']['input']>;
};

export type ListingsListingsMutation = {
  address?: InputMaybe<Scalars['String']['input']>;
  listing_type?: InputMaybe<Scalars['String']['input']>;
  property_type?: InputMaybe<Scalars['String']['input']>;
  pdf_url?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  additional_images?: InputMaybe<Array<InputMaybe<ListingsListingsAdditional_ImagesMutation>>>;
  price?: InputMaybe<ListingsListingsPriceMutation>;
  misc?: InputMaybe<ListingsListingsMiscMutation>;
  location?: InputMaybe<ListingsListingsLocationMutation>;
  buildings?: InputMaybe<Array<InputMaybe<ListingsListingsBuildingsMutation>>>;
  sections?: InputMaybe<Array<InputMaybe<ListingsListingsSectionsMutation>>>;
  description?: InputMaybe<Scalars['JSON']['input']>;
  agent_name?: InputMaybe<Scalars['String']['input']>;
};

export type ListingsMutation = {
  listings?: InputMaybe<Array<InputMaybe<ListingsListingsMutation>>>;
};

export type ListingsPartsFragment = { __typename: 'Listings', listings?: Array<{ __typename: 'ListingsListings', address?: string | null, listing_type?: string | null, property_type?: string | null, pdf_url?: string | null, image?: string | null, description?: any | null, agent_name?: string | null, additional_images?: Array<{ __typename: 'ListingsListingsAdditional_images', url?: string | null } | null> | null, price?: { __typename: 'ListingsListingsPrice', sale_price?: number | null, lease_rate?: string | null, price_per?: number | null } | null, misc?: { __typename: 'ListingsListingsMisc', traffic?: number | null, caprate?: number | null, zoning?: string | null, parcelid?: string | null } | null, location?: { __typename: 'ListingsListingsLocation', city?: string | null, state?: string | null, zipcode?: string | null, lat?: number | null, lng?: number | null } | null, buildings?: Array<{ __typename: 'ListingsListingsBuildings', square_feet?: number | null, lot_acres?: number | null, year_built?: number | null } | null> | null, sections?: Array<{ __typename: 'ListingsListingsSections', section_name?: string | null, section_description?: string | null } | null> | null } | null> | null };

export type ListingsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ListingsQuery = { __typename?: 'Query', listings: { __typename: 'Listings', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, listings?: Array<{ __typename: 'ListingsListings', address?: string | null, listing_type?: string | null, property_type?: string | null, pdf_url?: string | null, image?: string | null, description?: any | null, agent_name?: string | null, additional_images?: Array<{ __typename: 'ListingsListingsAdditional_images', url?: string | null } | null> | null, price?: { __typename: 'ListingsListingsPrice', sale_price?: number | null, lease_rate?: string | null, price_per?: number | null } | null, misc?: { __typename: 'ListingsListingsMisc', traffic?: number | null, caprate?: number | null, zoning?: string | null, parcelid?: string | null } | null, location?: { __typename: 'ListingsListingsLocation', city?: string | null, state?: string | null, zipcode?: string | null, lat?: number | null, lng?: number | null } | null, buildings?: Array<{ __typename: 'ListingsListingsBuildings', square_feet?: number | null, lot_acres?: number | null, year_built?: number | null } | null> | null, sections?: Array<{ __typename: 'ListingsListingsSections', section_name?: string | null, section_description?: string | null } | null> | null } | null> | null } };

export type ListingsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ListingsFilter>;
}>;


export type ListingsConnectionQuery = { __typename?: 'Query', listingsConnection: { __typename?: 'ListingsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ListingsConnectionEdges', cursor: string, node?: { __typename: 'Listings', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, listings?: Array<{ __typename: 'ListingsListings', address?: string | null, listing_type?: string | null, property_type?: string | null, pdf_url?: string | null, image?: string | null, description?: any | null, agent_name?: string | null, additional_images?: Array<{ __typename: 'ListingsListingsAdditional_images', url?: string | null } | null> | null, price?: { __typename: 'ListingsListingsPrice', sale_price?: number | null, lease_rate?: string | null, price_per?: number | null } | null, misc?: { __typename: 'ListingsListingsMisc', traffic?: number | null, caprate?: number | null, zoning?: string | null, parcelid?: string | null } | null, location?: { __typename: 'ListingsListingsLocation', city?: string | null, state?: string | null, zipcode?: string | null, lat?: number | null, lng?: number | null } | null, buildings?: Array<{ __typename: 'ListingsListingsBuildings', square_feet?: number | null, lot_acres?: number | null, year_built?: number | null } | null> | null, sections?: Array<{ __typename: 'ListingsListingsSections', section_name?: string | null, section_description?: string | null } | null> | null } | null> | null } | null } | null> | null } };

export const ListingsPartsFragmentDoc = gql`
    fragment ListingsParts on Listings {
  __typename
  listings {
    __typename
    address
    listing_type
    property_type
    pdf_url
    image
    additional_images {
      __typename
      url
    }
    price {
      __typename
      sale_price
      lease_rate
      price_per
    }
    misc {
      __typename
      traffic
      caprate
      zoning
      parcelid
    }
    location {
      __typename
      city
      state
      zipcode
      lat
      lng
    }
    buildings {
      __typename
      square_feet
      lot_acres
      year_built
    }
    sections {
      __typename
      section_name
      section_description
    }
    description
    agent_name
  }
}
    `;
export const ListingsDocument = gql`
    query listings($relativePath: String!) {
  listings(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ListingsParts
  }
}
    ${ListingsPartsFragmentDoc}`;
export const ListingsConnectionDocument = gql`
    query listingsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ListingsFilter) {
  listingsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ListingsParts
      }
    }
  }
}
    ${ListingsPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      listings(variables: ListingsQueryVariables, options?: C): Promise<{data: ListingsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ListingsQueryVariables, query: string}> {
        return requester<{data: ListingsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ListingsQueryVariables, query: string}, ListingsQueryVariables>(ListingsDocument, variables, options);
      },
    listingsConnection(variables?: ListingsConnectionQueryVariables, options?: C): Promise<{data: ListingsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ListingsConnectionQueryVariables, query: string}> {
        return requester<{data: ListingsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ListingsConnectionQueryVariables, query: string}, ListingsConnectionQueryVariables>(ListingsConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "https://content.tinajs.io/1.5/content/70168c56-eee5-4c77-a613-0636ffccc0ad/github/main",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  