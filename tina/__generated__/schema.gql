# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  listings(relativePath: String): Listings!
  listingsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ListingsFilter): ListingsConnection!
}

input DocumentFilter {
  listings: ListingsFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Listings | Folder

type ListingsListingsAdditional_images {
  url: String
}

type ListingsListingsPrice {
  sale_price: Float
  lease_rate: String
  price_per: Float
}

type ListingsListingsMisc {
  traffic: Float
  caprate: Float
  zoning: String
  parcelid: String
}

type ListingsListingsLocation {
  city: String
  state: String
  zipcode: String
  lat: Float
  lng: Float
}

type ListingsListingsBuildings {
  square_feet: Float
  lot_acres: Float
  year_built: Float
}

type ListingsListingsSections {
  section_name: String
  section_description: String
}

type ListingsListings {
  address: String
  listing_type: String
  property_type: String
  pdf_url: String
  image: String
  additional_images: [ListingsListingsAdditional_images]
  price: ListingsListingsPrice
  misc: ListingsListingsMisc
  location: ListingsListingsLocation
  buildings: [ListingsListingsBuildings]
  sections: [ListingsListingsSections]
  description: JSON
  agent_name: String
}

type Listings implements Node & Document {
  listings: [ListingsListings]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ListingsListingsAdditional_imagesFilter {
  url: ImageFilter
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input ListingsListingsPriceFilter {
  sale_price: NumberFilter
  lease_rate: StringFilter
  price_per: NumberFilter
}

input ListingsListingsMiscFilter {
  traffic: NumberFilter
  caprate: NumberFilter
  zoning: StringFilter
  parcelid: StringFilter
}

input ListingsListingsLocationFilter {
  city: StringFilter
  state: StringFilter
  zipcode: StringFilter
  lat: NumberFilter
  lng: NumberFilter
}

input ListingsListingsBuildingsFilter {
  square_feet: NumberFilter
  lot_acres: NumberFilter
  year_built: NumberFilter
}

input ListingsListingsSectionsFilter {
  section_name: StringFilter
  section_description: StringFilter
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input ListingsListingsFilter {
  address: StringFilter
  listing_type: StringFilter
  property_type: StringFilter
  pdf_url: StringFilter
  image: ImageFilter
  additional_images: ListingsListingsAdditional_imagesFilter
  price: ListingsListingsPriceFilter
  misc: ListingsListingsMiscFilter
  location: ListingsListingsLocationFilter
  buildings: ListingsListingsBuildingsFilter
  sections: ListingsListingsSectionsFilter
  description: RichTextFilter
  agent_name: StringFilter
}

input ListingsFilter {
  listings: ListingsListingsFilter
}

type ListingsConnectionEdges {
  cursor: String!
  node: Listings
}

type ListingsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ListingsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateListings(relativePath: String!, params: ListingsMutation!): Listings!
  createListings(relativePath: String!, params: ListingsMutation!): Listings!
}

input DocumentUpdateMutation {
  listings: ListingsMutation
  relativePath: String
}

input DocumentMutation {
  listings: ListingsMutation
}

input ListingsListingsAdditional_imagesMutation {
  url: String
}

input ListingsListingsPriceMutation {
  sale_price: Float
  lease_rate: String
  price_per: Float
}

input ListingsListingsMiscMutation {
  traffic: Float
  caprate: Float
  zoning: String
  parcelid: String
}

input ListingsListingsLocationMutation {
  city: String
  state: String
  zipcode: String
  lat: Float
  lng: Float
}

input ListingsListingsBuildingsMutation {
  square_feet: Float
  lot_acres: Float
  year_built: Float
}

input ListingsListingsSectionsMutation {
  section_name: String
  section_description: String
}

input ListingsListingsMutation {
  address: String
  listing_type: String
  property_type: String
  pdf_url: String
  image: String
  additional_images: [ListingsListingsAdditional_imagesMutation]
  price: ListingsListingsPriceMutation
  misc: ListingsListingsMiscMutation
  location: ListingsListingsLocationMutation
  buildings: [ListingsListingsBuildingsMutation]
  sections: [ListingsListingsSectionsMutation]
  description: JSON
  agent_name: String
}

input ListingsMutation {
  listings: [ListingsListingsMutation]
}

schema {
  query: Query
  mutation: Mutation
}
